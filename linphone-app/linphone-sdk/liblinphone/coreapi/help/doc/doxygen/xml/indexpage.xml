<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.11.0" xml:lang="en-US">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Liblinphone</title>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<sect1 id="index_1welcome">
<title>Welcome to liblinphone&apos;s C API reference documentation.</title><para>Liblinphone is a high-level open source library that integrates all the SIP voice/video and instant messaging features into a single easy-to-use API. This is the VoIP SDK engine on which Linphone applications are based.</para>
<para>Liblinphone combines our media processing and streaming toolkit (Mediastreamer2) with our user-agent library for SIP signaling (belle-sip).</para>
<para>Liblinphone is distributed under GPLv3 (<ulink url="https://www.gnu.org/licenses/gpl-3.0.html">https://www.gnu.org/licenses/gpl-3.0.html</ulink>). Please understand the licencing details before using it! For any use of this library beyond the rights granted to you by the GPLv3 license, please contact Belledonne Communications (<ulink url="https://www.linphone.org/contact">https://www.linphone.org/contact</ulink>).</para>
</sect1>
<sect1 id="index_1other_languages">
<title>Other languages</title><para>Liblinphone has support for a variety of languages, each one has its own reference documentation:</para>
<para><itemizedlist>
<listitem><para>C (<ulink url="https://download.linphone.org/releases/docs/liblinphone/5.3/c">https://download.linphone.org/releases/docs/liblinphone/5.3/c</ulink>)</para>
</listitem><listitem><para>C++ (<ulink url="https://download.linphone.org/releases/docs/liblinphone/5.3/c++">https://download.linphone.org/releases/docs/liblinphone/5.3/c++</ulink>)</para>
</listitem><listitem><para>Swift (<ulink url="https://download.linphone.org/releases/docs/liblinphone/5.3/swift">https://download.linphone.org/releases/docs/liblinphone/5.3/swift</ulink>)</para>
</listitem><listitem><para>Java (<ulink url="https://download.linphone.org/releases/docs/liblinphone/5.3/java">https://download.linphone.org/releases/docs/liblinphone/5.3/java</ulink>)</para>
</listitem><listitem><para>C# (<ulink url="https://download.linphone.org/releases/docs/liblinphone/5.3/cs">https://download.linphone.org/releases/docs/liblinphone/5.3/cs</ulink>)</para>
</listitem><listitem><para>Python (coming soon)</para>
</listitem></itemizedlist>
</para>
<para>Tutorials (code examples) are available on our gitlab repository (<ulink url="https://gitlab.linphone.org/BC/public/tutorials">https://gitlab.linphone.org/BC/public/tutorials</ulink>) for Swift, Java/Kotlin, and C#.</para>
<para><simplesect kind="see"><para><ulink url="http://www.linphone.org">http://www.linphone.org</ulink></para>
</simplesect>
</para>
</sect1>
<sect1 id="index_1quick_tour">
<title>Quick tour of liblinphone&apos;s features</title><sect2 id="index_1intro">
<title>Introduction</title><para>Liblinphone&apos;s has a consistent object-oriented design. All objects are sharing a common base structure, with ref-counting. Most objects must be constructed from the <ref refid="group__initializing_1ga3ce8cc4b9af4382f08540edc368f7310" kindref="member">LinphoneFactory</ref> object. By convention, all functions that are called &apos;<emphasis>create</emphasis>&apos; return a new object that needs to be later destroy by the application using the &apos;<emphasis>unref</emphasis>&apos; function of the object. Liblinphone is using SIP as signaling protocol, which actually comprises a huge set of RFCs to cover various aspects of communications. Some terminology of the API is directly inherited from SIP specifications, that&apos;s why having some knowledge of the protocol is recommended for a better understanding of this documentation.</para>
</sect2>
<sect2 id="index_1initializing">
<title>Initializing the engine</title><para>A typical liblinphone application has to first instanciate a <ref refid="group__initializing_1gaa5cf635b82dd338e7ee2dd3599d05f0a" kindref="member">LinphoneCore</ref> object using the <ref refid="group__initializing_1ga3ce8cc4b9af4382f08540edc368f7310" kindref="member">LinphoneFactory</ref>. The core object represents the liblinphone engine, from which call, conferences, instant messages can be sent or received. For events to be reported and engine to schedule its tasks, the application must call <ref refid="group__initializing_1ga37291e322c791983d332f9f561211405" kindref="member">linphone_core_iterate()</ref> at regular interval, typically from a 20ms timer. In most case, a SIP account has to be provisionned so that SIP registration can take place onto a SIP server. This task is designated to the <ref refid="group__account_1ga37aa8235c2655e0b9d14dd24f0f2e36a" kindref="member">LinphoneAccount</ref> object. A <ref refid="group__account_1ga37aa8235c2655e0b9d14dd24f0f2e36a" kindref="member">LinphoneAccount</ref> can be created using <ref refid="group__account_1gac4c90c5555c609bc32018654f9fe7ad4" kindref="member">linphone_core_create_account()</ref>, based on <ref refid="group__account_1ga46f072437f288d088975231c2bea7c35" kindref="member">LinphoneAccountParams</ref> representing parameters created with <ref refid="group__account_1gaedda841cd0e012abe10c539f0bc29d09" kindref="member">linphone_core_create_account_params()</ref>. Then, account can be added to the core for usage using <ref refid="group__account_1gacecff2175c1edc6f7448c2d3717aaa41" kindref="member">linphone_core_add_account()</ref>.</para>
<para>Application usually need to get informed of events occuring in the lifetime of the engine, which is done through callbacks &apos;*Cbs&apos; objects that application can use to set their own callbacks functions. An important callback object is the <ref refid="group__initializing_1gaa4a52a9cdc319baccd2232dda6681f8f" kindref="member">LinphoneCoreCbs</ref>. Once filled with its own function pointers, the callback structure can be assigned to the LinphoneCore using <ref refid="group__initializing_1ga6402c37fb79c74a7c9468275aa5ee81e" kindref="member">linphone_core_add_callbacks()</ref>. For example, application usually need to at least fill the <ref refid="group__initializing_1ga27e338d6826839bee9297219cd000e45" kindref="member">LinphoneCoreCbsCallCreatedCb</ref> callback using <ref refid="group__initializing_1ga733dee44a2950005cdb26d2fd95f52bf" kindref="member">linphone_core_cbs_set_call_created()</ref> in order to get informed when a new incoming call is created.</para>
</sect2>
<sect2 id="index_1calls">
<title>Making calls</title><para>Applications can place outgoing calls using <ref refid="group__call__control_1ga3e6b37fa94a35749454850f203040288" kindref="member">linphone_core_invite()</ref> or <ref refid="group__call__control_1ga5c02bd84201e33877158aefc94f9d3ef" kindref="member">linphone_core_invite_address_with_params()</ref>. The <ref refid="group__call__control_1gaa91f7e76e8f038ae9acdf42d1bc80a22" kindref="member">LinphoneCallParams</ref> object represents parameters for the calls, such as enabling video, requiring a specific <ref refid="group__media__parameters_1ga61f5a2961ec43a0bd91eb1a664a6f111" kindref="member">LinphoneMediaEncryption</ref>. The <ref refid="group__call__control_1gac16e901c67900cd8df5c9b78d238a8ae" kindref="member">LinphoneCallCbs</ref> object provides application way to get inform of the progress of the call, represented by the LinphoneCallState enum. Incoming calls are notified through the <ref refid="group__initializing_1gaa4a52a9cdc319baccd2232dda6681f8f" kindref="member">LinphoneCoreCbs</ref> callback interface, and can later be accepted using <ref refid="group__call__control_1ga560e5223603ddd425a06e945e177dbdb" kindref="member">linphone_call_accept()</ref>. Calls can be terminated or aborted at any time using <ref refid="group__call__control_1ga141ab348ae0e8601a95744384e732eb7" kindref="member">linphone_call_terminate()</ref>.</para>
</sect2>
<sect2 id="index_1instant_messaging">
<title>Instant messaging</title><para>The <ref refid="group__chatroom_1ga37902f3fc715b7f6451c241d0efd0299" kindref="member">LinphoneChatRoom</ref> object represents a text conversation. The LinphoneCore object provides persistancy for all conversations, ie it stores all received and sent messages. The list of conversations can be retrieved using <ref refid="group__chatroom_1gab6a4dbe3da7c51d603f8f142f22bece8" kindref="member">linphone_core_get_chat_rooms()</ref> To create a new conversation, use <ref refid="group__chatroom_1ga3957d768de38d92d6e35ebcf81002026" kindref="member">linphone_core_create_chat_room_2()</ref>. ChatRoomParams provide a way to specify which kind of chatroom is to be created: for group, for one-ton-one conversation, with end-to end encryption for example. To send a message, first create the <ref refid="group__chatroom_1gada79c4417919389b5247e254279f7833" kindref="member">LinphoneChatMessage</ref> with <ref refid="group__chatroom_1ga261e4ce98b576592d25bb63832a3836e" kindref="member">linphone_chat_room_create_message_from_utf8()</ref>, then send it with <ref refid="group__chatmessage_1gaa9367044579681fd3b59b6e8af977570" kindref="member">linphone_chat_message_send()</ref>. A <ref refid="group__chatroom_1gada79c4417919389b5247e254279f7833" kindref="member">LinphoneChatMessage</ref> reports its progress through the <ref refid="group__chatroom_1gaa1a715195601cd8885ca3a45bb3a1e6a" kindref="member">LinphoneChatMessageCbs</ref> callback interface. #LinphoneChatRooms are automatically created by the <ref refid="group__initializing_1gaa5cf635b82dd338e7ee2dd3599d05f0a" kindref="member">LinphoneCore</ref> when receiving a message that starts a new conversation, and notified through the <ref refid="group__initializing_1gaa4a52a9cdc319baccd2232dda6681f8f" kindref="member">LinphoneCoreCbs</ref> interface.</para>
</sect2>
<sect2 id="index_1presence">
<title>Presence</title><para>Applications can submit presence information through <ref refid="group__buddy__list_1gaa76851a45f92b7441ef4fc6fc59a64a5" kindref="member">linphone_core_set_presence_model()</ref>. The LinphonePresenceModel object represents the presence information, which is submitted to a presence server. Symmetrically, applications can subscribe to the presence server to get notified of the presence status of a contact list. This is to be done thanks to the <ref refid="group__buddy__list_1ga9094b6db3d193430d8a5f9a899758a21" kindref="member">LinphoneFriendList</ref> and <ref refid="group__buddy__list_1ga2f0508bab6d8ded431ce8b1a679a1522" kindref="member">LinphoneFriend</ref> object. </para>
</sect2>
</sect1>
    </detaileddescription>
    <location file="doxygen.dox"/>
  </compounddef>
</doxygen>
